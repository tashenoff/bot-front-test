import React, { useState, useEffect } from 'react';
import { useTranslation } from './hooks/useTranslation';

const Subscription = () => {
  const { language } = useTranslation();
  const [chatId, setChatId] = useState(null);

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
    if (window.Telegram?.WebApp) {
      const tg = window.Telegram.WebApp;
      tg.ready();
      tg.expand();
      tg.MainButton.hide();
      
      // –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ Telegram WebApp API
      if (tg.initDataUnsafe?.chat?.id) {
        setChatId(tg.initDataUnsafe.chat.id);
        console.log('Chat ID from WebApp:', tg.initDataUnsafe.chat.id);
      } else if (tg.initDataUnsafe?.user?.id) {
        // –ï—Å–ª–∏ chat –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º user id
        setChatId(tg.initDataUnsafe.user.id);
        console.log('User ID from WebApp:', tg.initDataUnsafe.user.id);
      }
    }

    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å chat_id –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ URL –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    const params = new URLSearchParams(window.location.search);
    const chatFromUrl = params.get('chat_id');
    if (chatFromUrl && !chatId) {
      setChatId(chatFromUrl);
      console.log('Chat ID from URL:', chatFromUrl);
    }
  }, []);

  const handleSubscriptionSelect = async (subscriptionType) => {
    if (window.Telegram?.WebApp) {
      try {
        const tg = window.Telegram.WebApp;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å chat_id
        if (!chatId) {
          throw new Error('Chat ID not available');
        }

        console.log('Creating subscription invoice for:', subscriptionType, 'chat:', chatId);

        // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω–≤–æ–π—Å –∏–∑ API
        const apiUrl = import.meta.env.VITE_API_URL || 'http://localhost:8001';
        const response = await fetch(`${apiUrl}/subscription/${subscriptionType}/invoice?chat_id=${chatId}`);

        if (!response.ok) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å –ø–æ–¥–ø–∏—Å–∫–∏');
        }

        const invoiceData = await response.json();
        console.log('Subscription invoice data:', invoiceData);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
        if (invoiceData.error) {
          throw new Error(invoiceData.error);
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω–≤–æ–π—Å
        const invoiceLink = invoiceData.invoice_link;
        if (!invoiceLink) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω–≤–æ–π—Å');
        }

        console.log('Opening subscription invoice:', invoiceLink);

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ Telegram WebApp
        tg.openInvoice(invoiceLink, (status) => {
          console.log('Subscription payment status:', status);

          if (status === 'paid') {
            // –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
            const successMessage = language === 'en' ? 
              `üéâ Payment successful! Premium subscription activated!` :
              `üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!`;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram
            tg.showAlert(successMessage);
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebApp —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
            setTimeout(() => {
              tg.close();
            }, 2000);
            
          } else if (status === 'cancelled') {
            // –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
            const cancelMessage = language === 'en' ? 'Payment cancelled' : '–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞';
            tg.showAlert(cancelMessage);
          } else if (status === 'failed') {
            // –û–ø–ª–∞—Ç–∞ –Ω–µ—É—Å–ø–µ—à–Ω–∞
            const failMessage = language === 'en' ? 'Payment failed' : '–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã';
            tg.showAlert(failMessage);
          } else {
            // –î—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—É—Å—ã
            console.log('Unknown payment status:', status);
          }
        });

      } catch (error) {
        console.error('Error purchasing subscription:', error);
        const errorMessage = language === 'en' ? 
          `Error: ${error.message}` : 
          `–û—à–∏–±–∫–∞: ${error.message}`;
        
        if (window.Telegram?.WebApp) {
          window.Telegram.WebApp.showAlert(errorMessage);
        } else {
          alert(errorMessage);
        }
      }
    } else {
      const noWebAppMessage = language === 'en' ? 
        'Telegram WebApp not available' : 
        'Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω';
      alert(noWebAppMessage);
    }
  };

  return (
    <div className="min-h-[400px] bg-black text-white p-4">
      <div className="max-w-md mx-auto py-8">
        {/* Premium –∫–∞—Ä—Ç–æ—á–∫–∞ */}
        <div className="relative rounded-3xl overflow-hidden shadow-2xl" style={{ height: '680px' }}>
          {/* –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
          <div 
            className="absolute inset-0 bg-cover bg-center"
            style={{ 
              backgroundImage: "url('/images/premium.jpeg')",
              backgroundPosition: 'center 20%'
            }}
          />
          
          {/* –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –æ–≤–µ—Ä–ª–µ–π –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ */}
          <div className="absolute inset-0 bg-gradient-to-b from-black/40 via-transparent to-black/60" />
          
          {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
          <div className="relative h-full flex flex-col justify-center items-start p-8">
            <div className="space-y-6 text-left">
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ */}
              <div className="space-y-4">
                <h2 className="text-5xl font-bold text-white leading-tight whitespace-pre-line">
                  {language === 'en' ? 'Premium\nMonth' : '–ü—Ä–µ–º–∏—É–º\n–º–µ—Å—è—Ü'}
                </h2>
                
                <div className="space-y-2 text-white text-base">
                  <p>{language === 'en' ? 'Exclusive characters' : '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏'}</p>
                  <p>{language === 'en' ? 'Unlimited messaging' : '–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ'}</p>
                  <p>{language === 'en' ? 'Priority generation' : '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è'}</p>
                  <p>{language === 'en' ? 'Exclusive content' : '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç'}</p>
                </div>
              </div>
              
              {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ */}
              <button
                className="bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 text-white font-semibold py-4 px-10 rounded-2xl transition-all transform hover:scale-105 shadow-lg shadow-purple-500/50 text-base"
                onClick={() => handleSubscriptionSelect('monthly')}
              >
                {language === 'en' ? 'Subscribe now' : '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å–µ–π—á–∞—Å'}
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Subscription;
