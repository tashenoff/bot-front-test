import React, { useState, useEffect } from 'react';
import { useTranslation } from './hooks/useTranslation';

const Subscription = () => {
  const { language } = useTranslation();
  const [chatId, setChatId] = useState(null);

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
    if (window.Telegram?.WebApp) {
      const tg = window.Telegram.WebApp;
      tg.ready();
      tg.expand();
      tg.MainButton.hide();
      
      // –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ Telegram WebApp API
      if (tg.initDataUnsafe?.chat?.id) {
        setChatId(tg.initDataUnsafe.chat.id);
        console.log('Chat ID from WebApp:', tg.initDataUnsafe.chat.id);
      } else if (tg.initDataUnsafe?.user?.id) {
        // –ï—Å–ª–∏ chat –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º user id
        setChatId(tg.initDataUnsafe.user.id);
        console.log('User ID from WebApp:', tg.initDataUnsafe.user.id);
      }
    }

    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å chat_id –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ URL –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    const params = new URLSearchParams(window.location.search);
    const chatFromUrl = params.get('chat_id');
    if (chatFromUrl && !chatId) {
      setChatId(chatFromUrl);
      console.log('Chat ID from URL:', chatFromUrl);
    }
  }, []);

  const handleSubscriptionSelect = (subscriptionType) => {
    if (!chatId) {
      alert(language === 'en' ? 'Error: Could not determine user' : '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    if (window.Telegram?.WebApp) {
      try {
        const tg = window.Telegram.WebApp;
        const botUsername = import.meta.env.VITE_BOT_USERNAME || 'your_bot';
        
        // –°–æ–∑–¥–∞–µ–º deep link –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –±–æ—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ
        const deepLink = `https://t.me/${botUsername}?start=subscription_${subscriptionType}_chat_${chatId}`;
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º deep link
        tg.openTelegramLink(deepLink);
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º webapp
        setTimeout(() => {
          tg.close();
        }, 100);
        
      } catch (error) {
        console.error('Error selecting subscription:', error);
        alert(language === 'en' ? `Error: ${error.message}` : `–û—à–∏–±–∫–∞: ${error.message}`);
      }
    } else {
      alert(language === 'en' ? 'Telegram WebApp not available' : 'Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
    }
  };

  return (
    <div className="min-h-screen bg-black text-white p-4">
      <div className="max-w-6xl mx-auto">
        <h1 className="text-4xl font-bold text-center mb-8 bg-clip-text text-transparent bg-gradient-to-r from-purple-400 to-pink-600">
          {language === 'en' ? '‚≠ê Premium Subscription' : '‚≠ê –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞'}
        </h1>
        <p className="text-center text-gray-400 mb-8">
          {language === 'en' ? 'Get access to exclusive characters and features' : '–ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º –∏ —Ñ—É–Ω–∫—Ü–∏—è–º'}
        </p>

        {/* –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ */}
        <div className="grid grid-cols-1 gap-6 max-w-md mx-auto">
          <div className="bg-gray-950 rounded-lg overflow-hidden shadow-lg hover:bg-gray-800 transition-colors relative">
            <div className="absolute inset-0 bg-gradient-to-r from-purple-500/20 to-pink-500/20"></div>
            <div className="relative p-6 text-center">
              <div className="text-4xl mb-4">‚≠ê</div>
              <h3 className="text-2xl font-bold mb-2 text-white">
                {language === 'en' ? 'Premium Month' : '–ü—Ä–µ–º–∏—É–º –º–µ—Å—è—Ü'}
              </h3>
              <div className="text-4xl font-bold text-purple-400 mb-4">
                199 ‚≠ê
              </div>
              <div className="text-gray-300 text-sm mb-6 space-y-2">
                <p>üéÆ {language === 'en' ? 'Exclusive characters' : '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏'}</p>
                <p>üí¨ {language === 'en' ? 'Unlimited messaging' : '–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ'}</p>
                <p>üé® {language === 'en' ? 'Priority generation' : '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è'}</p>
                <p>üî• {language === 'en' ? 'Exclusive content' : '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç'}</p>
              </div>
              <button 
                className="w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white font-bold py-3 px-4 rounded-lg transition-all transform hover:scale-105"
                onClick={() => handleSubscriptionSelect('monthly')}
              >
                {language === 'en' ? '‚≠ê Subscribe Now' : '‚≠ê –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å–µ–π—á–∞—Å'}
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Subscription;
