import React, { useState, useEffect } from 'react';
import GiftCard from './GiftCard';
import CrystalPackCard from './components/CrystalPackCard';
import { useTranslation } from './hooks/useTranslation';

const Gifts = () => {
  const { language } = useTranslation();
  const [gifts, setGifts] = useState([]);
  const [crystals, setCrystals] = useState([]);
  const [activeTab, setActiveTab] = useState('gifts');
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [chatId, setChatId] = useState(null);

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
    if (window.Telegram?.WebApp) {
      const tg = window.Telegram.WebApp;
      tg.ready();
      tg.expand();
      tg.MainButton.hide();
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è WebApp)
      const params = new URLSearchParams(window.location.search);
      const urlChatId = params.get('chat_id');
      
      if (urlChatId) {
        setChatId(parseInt(urlChatId));
      } else {
        // Fallback: –ø–æ–ª—É—á–∞–µ–º –∏–∑ Telegram WebApp API
        const webAppUser = tg.initDataUnsafe?.user;
        const webAppChat = tg.initDataUnsafe?.chat;
        
        if (webAppChat) {
          setChatId(webAppChat.id);
        } else if (webAppUser) {
          setChatId(webAppUser.id);
        }
      }
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–∞—Ä–∫–∏ –∏ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –∏–∑ API
    loadGifts();
    loadCrystals();
  }, []);

  const loadGifts = async () => {
    try {
      setIsLoading(true);
      const apiUrl = import.meta.env.VITE_API_URL || 'http://localhost:8001';
      const response = await fetch(`${apiUrl}/gifts`);

      if (!response.ok) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏');
      }

      const giftsData = await response.json();
      setGifts(giftsData);
      setError(null);
    } catch (err) {
      console.error('Error loading gifts:', err);
      setError(err.message);
      setGifts([]);
    } finally {
      setIsLoading(false);
    }
  };

  const loadCrystals = async () => {
    try {
      const apiUrl = import.meta.env.VITE_API_URL || 'http://localhost:8001';
      console.log('üîÑ Loading crystals from:', `${apiUrl}/crystals`);
      const response = await fetch(`${apiUrl}/crystals`);

      console.log('üì• Crystals response:', response.status, response.ok);

      if (!response.ok) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—Ä–∏—Å—Ç–∞–ª–ª—ã: ${response.status}`);
      }

      const crystalsData = await response.json();
      console.log('üíé Loaded crystals:', crystalsData);
      setCrystals(crystalsData);
    } catch (err) {
      console.error('‚ùå Error loading crystals:', err);
      
      // Fallback –∫ —Ç–µ—Å—Ç–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º
      const testCrystals = [
        {
          id: 'crystal_pack_small',
          name: 'üíé –ú–∞–ª–µ–Ω—å–∫–∏–π –ø–∞–∫–µ—Ç –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤',
          description: '50 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π',
          price: 10,
          crystal_amount: 50,
          image: '',
          popular: false,
          best_value: false
        }
      ];
      setCrystals(testCrystals);
    }
  };

  const handleGiftSelect = async (giftId) => {
    if (window.Telegram?.WebApp) {
      try {
        const tg = window.Telegram.WebApp;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å chat_id
        if (!chatId) {
          throw new Error('Chat ID not available');
        }

        console.log('Buying gift with crystals:', giftId, 'chat:', chatId);

        // –ü–æ–∫—É–ø–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã —á–µ—Ä–µ–∑ API
        const apiUrl = import.meta.env.VITE_API_URL || 'http://localhost:8001';
        const response = await fetch(`${apiUrl}/gifts/${giftId}/buy?chat_id=${chatId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });

        const responseData = await response.json();
        console.log('Gift purchase response:', responseData);

        if (!response.ok) {
          throw new Error(responseData.detail || '–ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫');
        }

        // –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞
        if (responseData.success) {
          const successMessage = language === 'en' ? 
            `üéâ Gift purchased! "${responseData.gift_name}" bought for ${responseData.crystal_price} crystals!` :
            `üéâ –ü–æ–¥–∞—Ä–æ–∫ –∫—É–ø–ª–µ–Ω! "${responseData.gift_name}" –∑–∞ ${responseData.crystal_price} –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤!`;
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram
          tg.showAlert(successMessage);
          
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebApp —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
          setTimeout(() => {
            tg.close();
          }, 2000);
        }

      } catch (error) {
        console.error('Error purchasing gift:', error);
        const errorMessage = language === 'en' ? 
          `Error: ${error.message}` : 
          `–û—à–∏–±–∫–∞: ${error.message}`;
        
        if (window.Telegram?.WebApp) {
          window.Telegram.WebApp.showAlert(errorMessage);
        } else {
          alert(errorMessage);
        }
      }
    } else {
      const noWebAppMessage = language === 'en' ? 
        'Telegram WebApp not available' : 
        'Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω';
      alert(noWebAppMessage);
    }
  };

  const handleCrystalSelect = async (crystalId) => {
    console.log('üéØ Crystal button clicked! ID:', crystalId, 'Chat ID:', chatId);
    
    if (window.Telegram?.WebApp) {
      try {
        const tg = window.Telegram.WebApp;

        if (!chatId) {
          throw new Error('Chat ID not available');
        }

        console.log('Creating invoice for crystal:', crystalId, 'chat:', chatId);

        const apiUrl = import.meta.env.VITE_API_URL || 'http://localhost:8001';
        const response = await fetch(`${apiUrl}/crystals/${crystalId}/invoice?chat_id=${chatId}`);

        if (!response.ok) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å –¥–ª—è –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤');
        }

        const invoiceData = await response.json();
        console.log('Crystal invoice data:', invoiceData);

        if (invoiceData.error) {
          throw new Error(invoiceData.error);
        }

        const invoiceLink = invoiceData.invoice_link;
        if (!invoiceLink) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω–≤–æ–π—Å');
        }

        console.log('Opening crystal invoice:', invoiceLink);

        tg.openInvoice(invoiceLink, (status) => {
          console.log('Crystal payment status:', status);

          if (status === 'paid') {
            const crystal = crystals.find(c => c.id === crystalId);
            const successMessage = language === 'en' ? 
              `üéâ Payment successful! ${crystal?.crystal_amount} crystals purchased!` :
              `üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! ${crystal?.crystal_amount} –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –∫—É–ø–ª–µ–Ω–æ!`;
            
            tg.showAlert(successMessage);
            
            setTimeout(() => {
              tg.close();
            }, 2000);
            
          } else if (status === 'cancelled') {
            const cancelMessage = language === 'en' ? 'Payment cancelled' : '–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞';
            tg.showAlert(cancelMessage);
          } else if (status === 'failed') {
            const failMessage = language === 'en' ? 'Payment failed' : '–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã';
            tg.showAlert(failMessage);
          }
        });

      } catch (error) {
        console.error('Error purchasing crystals:', error);
        const errorMessage = language === 'en' ? 
          `Error: ${error.message}` : 
          `–û—à–∏–±–∫–∞: ${error.message}`;
        
        if (window.Telegram?.WebApp) {
          window.Telegram.WebApp.showAlert(errorMessage);
        } else {
          alert(errorMessage);
        }
      }
    } else {
      const noWebAppMessage = language === 'en' ? 
        'Telegram WebApp not available' : 
        'Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω';
      alert(noWebAppMessage);
    }
  };

  return (
    <div className="min-h-screen bg-black text-white p-4">
      <div className="max-w-6xl mx-auto">
        <h1 className="text-4xl font-bold text-center mb-4 bg-clip-text text-transparent bg-gradient-to-r from-purple-400 to-pink-600">
          {activeTab === 'gifts' 
            ? (language === 'en' ? 'üéÅ Gift Shop' : 'üéÅ –ú–∞–≥–∞–∑–∏–Ω –ø–æ–¥–∞—Ä–∫–æ–≤')
            : (language === 'en' ? 'üíé Crystal Shop' : 'üíé –ú–∞–≥–∞–∑–∏–Ω –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤')
          }
        </h1>
        <p className="text-center text-gray-400 mb-8">
          {activeTab === 'gifts' 
            ? (language === 'en' ? 'Choose a gift to delight the character' : '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫, —á—Ç–æ–±—ã –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞')
            : (language === 'en' ? 'Buy crystals to unlock more conversations' : '–ö—É–ø–∏—Ç–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π')
          }
        </p>

        {/* –¢–∞–±—ã */}
        <div className="flex justify-center mb-8">
          <div className="bg-gray-800 rounded-lg p-1 flex">
            <button
              onClick={() => setActiveTab('gifts')}
              className={`px-6 py-3 rounded-lg font-semibold transition-all ${
                activeTab === 'gifts'
                  ? 'bg-purple-600 text-white'
                  : 'text-gray-400 hover:text-white'
              }`}
            >
              üéÅ {language === 'en' ? 'Gifts' : '–ü–æ–¥–∞—Ä–∫–∏'}
            </button>
            <button
              onClick={() => setActiveTab('crystals')}
              className={`px-6 py-3 rounded-lg font-semibold transition-all ${
                activeTab === 'crystals'
                  ? 'bg-blue-600 text-white'
                  : 'text-gray-400 hover:text-white'
              }`}
            >
              üíé {language === 'en' ? 'Crystals' : '–ö—Ä–∏—Å—Ç–∞–ª–ª—ã'}
            </button>
          </div>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-6">
          {activeTab === 'gifts' 
            ? gifts.map(gift => (
                <GiftCard 
                  key={gift.id} 
                  gift={gift} 
                  showBuyButton={true}
                  onSelect={handleGiftSelect}
                />
              ))
            : crystals.map(crystal => (
                <CrystalPackCard 
                  key={crystal.id} 
                  crystal={crystal} 
                  onSelect={handleCrystalSelect}
                />
              ))
          }
        </div>
      </div>
    </div>
  );
};

export default Gifts;
