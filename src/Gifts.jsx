import React, { useState, useEffect } from 'react';
import GiftCard from './GiftCard';
import { useTranslation } from './hooks/useTranslation';

const Gifts = () => {
  const { language } = useTranslation();
  const [gifts, setGifts] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [chatId, setChatId] = useState(null);

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
    if (window.Telegram?.WebApp) {
      const tg = window.Telegram.WebApp;
      tg.ready();
      tg.expand();
      tg.MainButton.hide();
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è WebApp)
      const params = new URLSearchParams(window.location.search);
      const urlChatId = params.get('chat_id');
      
      if (urlChatId) {
        setChatId(parseInt(urlChatId));
      } else {
        // Fallback: –ø–æ–ª—É—á–∞–µ–º –∏–∑ Telegram WebApp API
        const webAppUser = tg.initDataUnsafe?.user;
        const webAppChat = tg.initDataUnsafe?.chat;
        
        if (webAppChat) {
          setChatId(webAppChat.id);
        } else if (webAppUser) {
          setChatId(webAppUser.id);
        }
      }
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–∞—Ä–∫–∏ –∏–∑ API
    loadGifts();
  }, []);

  const loadGifts = async () => {
    try {
      setIsLoading(true);
      const apiUrl = import.meta.env.VITE_API_URL || 'http://localhost:8001';
      const response = await fetch(`${apiUrl}/gifts`);

      if (!response.ok) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏');
      }

      const giftsData = await response.json();
      setGifts(giftsData);
      setError(null);
    } catch (err) {
      console.error('Error loading gifts:', err);
      setError(err.message);
      setGifts([]);
    } finally {
      setIsLoading(false);
    }
  };


  const handleGiftSelect = async (giftId) => {
    if (window.Telegram?.WebApp) {
      try {
        const tg = window.Telegram.WebApp;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å chat_id
        if (!chatId) {
          throw new Error('Chat ID not available');
        }

        console.log('Buying gift with crystals:', giftId, 'chat:', chatId);

        // –ü–æ–∫—É–ø–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã —á–µ—Ä–µ–∑ API
        const apiUrl = import.meta.env.VITE_API_URL || 'http://localhost:8001';
        const response = await fetch(`${apiUrl}/gifts/${giftId}/buy?chat_id=${chatId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });

        const responseData = await response.json();
        console.log('Gift purchase response:', responseData);

        if (!response.ok) {
          throw new Error(responseData.detail || '–ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫');
        }

        // –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞
        if (responseData.success) {
          const successMessage = language === 'en' ? 
            `üéâ Gift purchased! "${responseData.gift_name}" bought for ${responseData.crystal_price} crystals!` :
            `üéâ –ü–æ–¥–∞—Ä–æ–∫ –∫—É–ø–ª–µ–Ω! "${responseData.gift_name}" –∑–∞ ${responseData.crystal_price} –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤!`;
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram
          tg.showAlert(successMessage);
          
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebApp —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
          setTimeout(() => {
            tg.close();
          }, 2000);
        }

      } catch (error) {
        console.error('Error purchasing gift:', error);
        const errorMessage = language === 'en' ? 
          `Error: ${error.message}` : 
          `–û—à–∏–±–∫–∞: ${error.message}`;
        
        if (window.Telegram?.WebApp) {
          window.Telegram.WebApp.showAlert(errorMessage);
        } else {
          alert(errorMessage);
        }
      }
    } else {
      const noWebAppMessage = language === 'en' ? 
        'Telegram WebApp not available' : 
        'Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω';
      alert(noWebAppMessage);
    }
  };


  return (
    <div className="min-h-screen bg-black text-white p-4">
      <div className="max-w-6xl mx-auto">
        <h1 className="text-4xl font-bold text-center mb-4 bg-clip-text text-transparent bg-gradient-to-r from-purple-400 to-pink-600">
          {language === 'en' ? 'üéÅ Gift Shop' : 'üéÅ –ú–∞–≥–∞–∑–∏–Ω –ø–æ–¥–∞—Ä–∫–æ–≤'}
        </h1>
        <p className="text-center text-gray-400 mb-8">
          {language === 'en' ? 'Choose a gift to delight the character' : '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫, —á—Ç–æ–±—ã –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞'}
        </p>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-6">
          {gifts.map(gift => (
            <GiftCard 
              key={gift.id} 
              gift={gift} 
              showBuyButton={true}
              onSelect={handleGiftSelect}
            />
          ))}
        </div>

        {gifts.length === 0 && !isLoading && (
          <div className="text-center text-gray-400 mt-8">
            <div className="text-6xl mb-4">üéÅ</div>
            <p className="text-xl">
              {language === 'en' ? 'No gifts available at the moment' : '–ü–æ–¥–∞—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}
            </p>
          </div>
        )}

        {isLoading && (
          <div className="text-center text-gray-400 mt-8">
            <div className="w-12 h-12 border-4 border-purple-500 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
            <p className="text-xl">
              {language === 'en' ? 'Loading gifts...' : '–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤...'}
            </p>
          </div>
        )}

        {error && (
          <div className="text-center text-red-400 mt-8">
            <div className="text-6xl mb-4">‚ùå</div>
            <p className="text-xl mb-4">{error}</p>
            <button 
              onClick={loadGifts}
              className="bg-purple-600 hover:bg-purple-700 px-4 py-2 rounded-lg transition-colors"
            >
              {language === 'en' ? 'Try Again' : '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞'}
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default Gifts;
