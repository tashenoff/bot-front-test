import React, { useState, useEffect } from 'react';
import GiftCard from './GiftCard';

const Gifts = () => {
  const [gifts, setGifts] = useState([]);
  const [chatId, setChatId] = useState(null);
  const [debug, setDebug] = useState([]);

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
    if (window.Telegram?.WebApp) {
      const tg = window.Telegram.WebApp;
      tg.ready();
      tg.expand();
      
      // –°–∫—Ä—ã–≤–∞–µ–º MainButton –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      tg.MainButton.hide();
      
      setDebug(prev => [...prev, 'WebApp initialized']);
      setDebug(prev => [...prev, `Platform: ${tg.platform}`]);
      setDebug(prev => [...prev, `Version: ${tg.version}`]);
    } else {
      setDebug(prev => [...prev, 'WebApp not available']);
    }

    // –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ URL
    const params = new URLSearchParams(window.location.search);
    const chat = params.get('chat_id');
    setChatId(chat);
    setDebug(prev => [...prev, `Chat ID: ${chat}`]);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–∞—Ä–∫–∏
    fetch('/gifts.json')
      .then(response => response.json())
      .then(data => {
        setGifts(data);
        setDebug(prev => [...prev, `Loaded ${data.length} gifts`]);
      })
      .catch(error => {
        console.error('Error loading gifts:', error);
        setDebug(prev => [...prev, `Error: ${error.message}`]);
      });
  }, []);

  const handleGiftSelect = (giftId) => {
    setDebug(prev => [...prev, `Selecting gift: ${giftId}`]);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–¥–∞—Ä–∫–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Telegram WebApp API
    if (window.Telegram?.WebApp) {
      try {
        const tg = window.Telegram.WebApp;
        const data = JSON.stringify({ 
          type: 'gift_selected',
          gift_id: giftId,
          chat_id: chatId 
        });
        
        setDebug(prev => [...prev, `Prepared data: ${data}`]);
        setDebug(prev => [...prev, `Data length: ${data.length}`]);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ sendData
        if (typeof tg.sendData === 'function') {
          setDebug(prev => [...prev, 'Calling sendData...']);
          tg.sendData(data);
          setDebug(prev => [...prev, 'sendData called successfully']);
        } else {
          setDebug(prev => [...prev, 'sendData not available!']);
          alert('–ú–µ—Ç–æ–¥ sendData –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–µ—Ä—Å–∏—è WebApp: ' + tg.version);
          return;
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º webapp —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setDebug(prev => [...prev, 'Closing in 500ms...']);
        setTimeout(() => {
          setDebug(prev => [...prev, 'Calling close...']);
          tg.close();
        }, 500);
        
      } catch (error) {
        setDebug(prev => [...prev, `Error: ${error.message}`]);
        setDebug(prev => [...prev, `Error stack: ${error.stack}`]);
        alert(`–û—à–∏–±–∫–∞: ${error.message}`);
      }
    } else {
      setDebug(prev => [...prev, 'WebApp not available!']);
      alert('Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. Debug: ' + debug.join(', '));
    }
  };

  return (
    <div className="min-h-screen bg-gray-900 text-white p-4">
      <div className="max-w-6xl mx-auto">
        <h1 className="text-4xl font-bold text-center mb-8 bg-clip-text text-transparent bg-gradient-to-r from-purple-400 to-pink-600">
          üéÅ –ú–∞–≥–∞–∑–∏–Ω –ø–æ–¥–∞—Ä–∫–æ–≤
        </h1>
        <p className="text-center text-gray-400 mb-8">
          –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫, —á—Ç–æ–±—ã –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        </p>
        
        {/* Debug info */}
        {debug.length > 0 && (
          <div className="mb-4 p-4 bg-gray-800 rounded text-xs">
            <div className="font-bold mb-2">Debug Info:</div>
            {debug.map((msg, i) => (
              <div key={i} className="text-gray-400">{msg}</div>
            ))}
          </div>
        )}
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {gifts.map(gift => (
            <GiftCard 
              key={gift.id} 
              gift={gift} 
              showBuyButton={true}
              onSelect={handleGiftSelect}
            />
          ))}
        </div>
      </div>
    </div>
  );
};

export default Gifts;
